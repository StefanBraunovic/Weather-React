{"version":3,"sources":["components/weatherCard/Location.js","components/weatherCard/Icon.js","components/weatherCard/Vrijeme.js","components/weatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Icon","props","img","icon","condition","src","alf","Vrijeme","temp","State","Temp","WeatherCard","highColor","lowColor","bg","Card","WeatherEngine","location","useState","query","setQuery","error","setError","loading","setLoading","weather","setWeather","getWeather","q","a","fetch","apiRes","json","resJSON","main","name","sys","useEffect","style","color","onClick","value","onChange","e","target","preventDefault","handleSearch","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.417c43b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Location = ({ city, country }) => {\r\n  const Container = styled.div`\r\n    text-align: center;\r\n  `;\r\n  const City = styled.h1`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.5rem;\r\n  `;\r\n\r\n  const Country = styled.h3`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 1rem;\r\n  `;\r\n\r\n  return (\r\n    <Container>\r\n      <City>{city}</City>\r\n      <Country>{country}</Country>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Icon = (props) => {\r\n  const Icon = styled.img`\r\n    width: 50%;\r\n  `;\r\n\r\n  var icon = \"\";\r\n  switch (props.condition) {\r\n    case \"Clouds\":\r\n      icon = `./img/Mostly Cloudy-2x.png`;\r\n      break;\r\n    case \"Clear\":\r\n      icon = `./img/Mostly Sunny-2x.png`;\r\n      break;\r\n    case \"Haze\":\r\n      icon = `./img/Haze-2x.png`;\r\n      break;\r\n    case \"Hail\":\r\n      icon = `./img/Hail-2x.png`;\r\n      break;\r\n    case \"Fog\":\r\n      icon = `./img/Fog-2x.png`;\r\n      break;\r\n    case \"Tornado\":\r\n      icon = `./img/Tornado-2x.png`;\r\n      break;\r\n    case \"Dust\":\r\n      icon = `./img/Dust-2x.png`;\r\n      break;\r\n    case \"Mist\":\r\n      icon = `./img/Fog-2x.png`;\r\n      break;\r\n    case \"Snow\":\r\n      icon = `./img/Snow-2x.png`;\r\n      break;\r\n    case \"Rain\":\r\n      icon = `./img/Rain-2x.png`;\r\n      break;\r\n    case \"Drizzle\":\r\n      icon = `./img/Drizzle-2x.png`;\r\n      break;\r\n    case \"Thunderstorm\":\r\n      icon = `./img/Severe Thunderstorm-2x.png`;\r\n      break;\r\n    default:\r\n      icon = `./img/Fog-2x.png`;\r\n      break;\r\n  }\r\n\r\n  return <Icon src={icon} alf=\"weather-icon\"></Icon>;\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Vrijeme = ({ temp, condition }) => {\r\n  const State = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.2rem;\r\n  `;\r\n  const Temp = styled.h1`\r\n    font-family: \"Fira sans\", sans-serif;\r\n    font-size: 2em;\r\n    font-weight: 200;\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <Temp>{temp}Â°C</Temp>\r\n      <State>{condition}</State>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Vrijeme;\r\n","//ovo je komponent\r\nimport React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Location from \"./Location\";\r\nimport Icon from \"./Icon\";\r\nimport Vrijeme from \"./Vrijeme\";\r\n\r\nconst WeatherCard = ({ temp, condition, city, country }) => {\r\n  let highColor = 0;\r\n  let lowColor = 0;\r\n  let bg = null;\r\n  if (temp > 12) {\r\n    highColor = (1 - (temp - 12) / 28) * 255;\r\n    lowColor = highColor - 150;\r\n    bg = `linear-gradient(\r\n      to top,\r\n      rgb(255, ${highColor}, 0),\r\n      rgb(255, ${lowColor}, 0)\r\n    )`;\r\n  } else if (temp <= 12) {\r\n    highColor = (1 - (temp + 20) / 32) * 255;\r\n    lowColor = highColor - 150;\r\n    bg = ` linear-gradient(\r\n      to top,\r\n      rgb(0, ${highColor}, 255),\r\n      rgb(0, ${lowColor}, 255)\r\n    )`;\r\n  }\r\n  const Card = styled.div`\r\n    margin: 0 auto;\r\n    background: ${bg};\r\n    width: 200px;\r\n    height: 240px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n  `;\r\n\r\n  return (\r\n    <Card>\r\n      <Location city={city} country={country} />\r\n      <Icon condition={condition} />\r\n      <Vrijeme temp={temp} condition={condition} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport WeatherCard from \"./weatherCard/component\";\r\n\r\nconst WeatherEngine = ({ location }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false); // handling errors\r\n  const [weather, setWeather] = useState({\r\n    temp: null,\r\n    city: null,\r\n    condition: null,\r\n    country: null,\r\n  });\r\n\r\n  const getWeather = async (q) => {\r\n    setLoading(true);\r\n    setQuery(\"\"); //error handling\r\n    try {\r\n      const apiRes = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${q}&units=metric&APPID=f2c4e1c1bd156e0991e2a71ab08ca127`\r\n      );\r\n      const resJSON = await apiRes.json();\r\n      setWeather({\r\n        temp: resJSON.main.temp,\r\n        city: resJSON.name,\r\n        condition: resJSON.weather[0].main,\r\n        country: resJSON.sys.country,\r\n      });\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false); //error handling\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    getWeather(query);\r\n  };\r\n  useEffect(() => {\r\n    getWeather(location);\r\n  }, [location]);\r\n\r\n  return (\r\n    <div>\r\n      {!loading && !error ? (\r\n        <div>\r\n          <WeatherCard\r\n            temp={weather.temp}\r\n            condition={weather.condition}\r\n            city={weather.city}\r\n            country={weather.country}\r\n          />\r\n\r\n          <form>\r\n            <input value={query} onChange={(e) => setQuery(e.target.value)} />\r\n            <button onClick={(e) => handleSearch(e)}>Search</button>\r\n          </form>\r\n        </div>\r\n      ) : loading ? (\r\n        <div style={{ color: \"black\" }}>loading</div>\r\n      ) : !loading && error ? (\r\n        <div style={{ color: \"black\" }}>\r\n          There has been an error!\r\n          <br />\r\n          <button onClick={() => setError(false)}>Reset</button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherEngine;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport WeatherEngine from \"./components/WeatherEngine\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <WeatherEngine location=\"Podgorica, me\" />\n      <WeatherEngine location=\"Belgrade,rs\" />\n      <WeatherEngine location=\"Amsterdam,nl\" />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}